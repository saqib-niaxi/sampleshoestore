{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NotFound","Home","Launch","LaunchIndex","Object","entries","shoes","map","slug","name","img","key","to","src","alt","LaunchShoe","useParams","shoe","Boolean","window","location","hostname","match","ReactDOM","render","path","element","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNA8BA,SAASA,IACP,OACE,6BACE,0CACA,8DAKN,SAASC,IACP,OACE,6BACE,8CAKN,SAASC,IACP,OACE,6BACE,sCAEA,kBAAC,IAAD,OAKN,SAASC,IACP,OACE,4BACGC,OAAOC,QAAQC,GAAOC,KAAI,mCAAEC,EAAF,YAAUC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,IAAhB,OACzB,wBAAIC,IAAKH,GACP,kBAAC,IAAD,CAAMI,GAAE,kBAAaJ,IACnB,4BAAKC,GACL,yBAAKI,IAAKH,EAAKI,IAAKL,UAQhC,SAASM,IAAc,IACbP,EAASQ,cAATR,KACFS,EAAOX,EAAME,GAEnB,IAAKS,EACH,OAAO,0CALW,IAQZR,EAAcQ,EAAdR,KAAMC,EAAQO,EAARP,IAEd,OACE,6BACE,4BAAKD,GACL,yBAAKI,IAAKH,EAAKI,IAAKL,KAK1B,IAAMH,EAAQ,CACZ,0BAA2B,CACzBG,KAAM,cACNC,IACE,+FAEJ,yBAA0B,CACxBD,KAAM,yBACNC,IACE,+FAEJ,+BAAgC,CAC9BD,KAAM,aACNC,IACE,gGC5FcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFID,WACb,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAMZ,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,IAAIC,QAAS,kBAACzB,EAAD,QACzB,kBAAC,IAAD,CAAOwB,KAAK,SAASC,QAAS,kBAACxB,EAAD,OAC5B,kBAAC,IAAD,CAAOuB,KAAK,IAAIC,QAAS,kBAACvB,EAAD,QACzB,kBAAC,IAAD,CAAOsB,KAAK,QAAQC,QAAS,kBAACX,EAAD,SAE/B,kBAAC,IAAD,CAAOU,KAAK,IAAIC,QAAS,kBAAC1B,EAAD,YElBjB,MAAS2B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.97a85dc1.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  Outlet,\n  useParams\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <nav>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/launch\">Launch</Link>\n      </nav>\n\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"launch\" element={<Launch />}>\n          <Route path=\"/\" element={<LaunchIndex />} />\n          <Route path=\":slug\" element={<LaunchShoe />} />\n        </Route>\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </Router>\n  );\n}\n\nfunction NotFound() {\n  return (\n    <div>\n      <h1>Not found!</h1>\n      <p>Sorry your page was not found!</p>\n    </div>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h1>Welcome Home!</h1>\n    </div>\n  );\n}\n\nfunction Launch() {\n  return (\n    <div>\n      <h1>Launch</h1>\n\n      <Outlet />\n    </div>\n  );\n}\n\nfunction LaunchIndex() {\n  return (\n    <ul>\n      {Object.entries(shoes).map(([slug, { name, img }]) => (\n        <li key={slug}>\n          <Link to={`/launch/${slug}`}>\n            <h2>{name}</h2>\n            <img src={img} alt={name} />\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction LaunchShoe() {\n  const { slug } = useParams();\n  const shoe = shoes[slug];\n\n  if (!shoe) {\n    return <h2>Not Found!</h2>;\n  }\n\n  const { name, img } = shoe;\n\n  return (\n    <div>\n      <h2>{name}</h2>\n      <img src={img} alt={name} />\n    </div>\n  );\n}\n\nconst shoes = {\n  \"air-jordan-3-valor-blue\": {\n    name: \"VALOUR BLUE\",\n    img:\n      \"https://secure-images.nike.com/is/image/DotCom/CT8532_104_A_PREM?$SNKRS_COVER_WD$&align=0,1\"\n  },\n  \"jordan-mars-270-london\": {\n    name: \"JORDAN MARS 270 LONDON\",\n    img:\n      \"https://secure-images.nike.com/is/image/DotCom/CV3042_001_A_PREM?$SNKRS_COVER_WD$&align=0,1\"\n  },\n  \"air-jordan-1-zoom-racer-blue\": {\n    name: \"RACER BLUE\",\n    img:\n      \"https://secure-images.nike.com/is/image/DotCom/CK6637_104_A_PREM?$SNKRS_COVER_WD$&align=0,1\"\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}